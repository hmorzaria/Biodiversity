library(rgdal)
install.packages("XLConnectJars")
install.packages("XLConnect")
library(XLConnect)
install.packages(c("XLConnect", "XLConnectJars", "rgdal"))
library(XLConnect)
source('E:/Archivos/1Archivos/Articulos/En preparacion/Spatial management/Analysis/Data_biodiversity.R')
install.packages("XLConnect")
library(XLConnect)
library(XLConnect)
library(XLConnect)
install.packages("rJava")
library(XLConnect)
install.packages("XLConnectJars")
library(XLConnect)
Sys.setenv(JAVA_HOME='C:\Program Files\Java\jre1.8.0_45')
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jre1.8.0_45')
library(XLConnect)
library(psych)
library(nFactors)
library(reshape)
library(ggplot2)
library(dplyr)
library(gdata)
library(data.table)
library(tidyr)
library(pipeR)
library(erer)
library(FactoMineR)
update.packages()
install.packages(c("data.table","gdata","tidyr","pipeR","erer","psych","nFactors","tidyr","pipeR","erer","reshape","ggplot2","dplyr","FactoMineR"))
install.packages(c("data.table", "gdata", "tidyr", "pipeR", "erer",
"psych","nFactors","tidyr","pipeR","erer","reshape","ggplot2","dplyr","FactoMineR"))
library(psych)
library(nFactors)
library(reshape)
library(ggplot2)
library(dplyr)
library(gdata)
library(data.table)
library(tidyr)
library(pipeR)
library(erer)
library(FactoMineR)
library("bibtex", lib.loc="~/R/win-library/3.2")
library("RefManageR", lib.loc="~/R/win-library/3.2")
BibEntry(bibtype = "Article", key = "mclean2014", title = "An Article Title",
author = "Mathew W. McLean", journaltitle = "The Journal Title",
date = "2014-02-06", pubstate = "forthcoming")
library("knitcitations", lib.loc="~/R/win-library/3.2")
library("knitr", lib.loc="~/R/win-library/3.2")
bib <- BibEntry(bibtype = "Article", key = "mclean2014", title = "An Article Title",
+          author = "Mathew W. McLean", journaltitle = "The Journal Title",
+          date = "2014-02-06", pubstate = "forthcoming")
bib <- BibEntry(bibtype = "Article", key = "mclean2014", title = "An Article Title",
author = "Mathew W. McLean", journaltitle = "The Journal Title",
date = "2014-02-06", pubstate = "forthcoming")
this.polygon = 'POLYGON((-113.8001 29.3949, -109.8193 29.3949, -109.8193 27.0713, -113.8001 27.0713, -113.8001 29.3949))'
wkt <- 'POLYGON((-98.9 44.2,-89.1 36.6,-116.7 37.5,-102.5 39.6,-98.9 44.2))'
occ(from = "gbif", geometry = wkt, limit = 10)
library("xtable", lib.loc="~/R/win-library/3.2")
?print.xtable
?surface
library("fields", lib.loc="~/R/win-library/3.2")
?Tps
?surface
?Krig
?idw
install.packages("gstat")
library(rgdal)
?CRS
?CRS
myproj = CRS("+proj=longlat +datum=WGS84")
myproj
?proj4string
x = c("gdata","ggplot2","reshape","dplyr","RColorBrewer","classInt",
"rgdal","rgeos","magrittr","maptools","raster","data.table","wesanderson", "plyr")
lapply(x, require, character.only = TRUE)
rm(list=ls())
zonationfiles = "E:/Archivos/1Archivos/Articulos/En preparacion/Spatial_management/Analisis/Zonation/Scenarios_Nov2015/Zonation_files"
location.folders <- list.dirs(full.names = TRUE,recursive=FALSE)
#'Hem Nalini Morzaria Luna
#'hmorzarialuna@gmail.com
#'Based on R script by Miguel Gandra || m3gandra@gmail.com || April 2015
#'
#'clean up the space
rm(list=ls())
#' Automatically install required libraries
if(!require(dismo)){install.packages("dismo"); library(dismo)}
if(!require(data.table)){install.packages("data.table"); library(data.table)}
if(!require(XML)){install.packages("XML"); library(XML)}
if(!require(jsonlite)){install.packages("jsonlite"); library(jsonlite)}
if(!require(graphics)){install.packages("graphics"); library(graphics)}
if(!require(maps)){install.packages("maps"); library(maps)}
if(!require(maptools)){install.packages("maptools"); library(maptools)}
if(!require(rgeos)){install.packages("rgeos"); library(rgeos)}
if(!require(rgdal)){install.packages("rgdal"); library(rgdal)}
if(!require(magrittr)){install.packages("magrittr"); library(magrittr)}
if(!require(dplyr)){install.packages("dplyr"); library(dplyr)}
if(!require(Hmisc)){install.packages("Hmisc"); library(Hmisc)}
if(!require(spocc)){install.packages("spocc"); library(spocc)}
if(!require(rgdal)){install.packages("rgdal"); library(rgdal)}
if(!require(ridigbio)){install.packages("ridigbio"); library(ridigbio)}
if(!require(rvertnet)){install.packages("rvertnet"); library(rvertnet)}
if(!require(ecoengine)){install.packages("ecoengine"); library(ecoengine)}
if(!require(rbison)){install.packages("rbison"); library(rbison)}
if(!require(rgbif)){install.packages("rgbif"); library(rgbif)}
if(!require(rebird)){install.packages("rebird"); library(rebird)}
if(!require(readxl)){install.packages("readxl"); library(readxl)}
workpath = "E:/Archivos/1Archivos/Articulos/En preparacion/Biodiversity_model/Analysis/RCode"
shapepath = "E:/Archivos/1Archivos/Articulos/En preparacion/Biodiversity_model/Analysis/SIG_Biodiversity"
savepath = "E:/Archivos/1Archivos/Articulos/En preparacion/Biodiversity_model/Analysis"
ulloafiles="E:/Archivos/1Archivos/Articulos/En preparacion/Biodiversity_model/Datos/Ulloa_datos" #put path
datafiles="E:/Archivos/1Archivos/Articulos/En preparacion/Biodiversity_model/Datos/Ocurrencia_especies"
# projections
crs.geo.wgs <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")  # geographical, datum WGS84
crs.lcc <- CRS("+proj=lcc +lat_1=17.5 +lat_2=29.5 +lat_0=0 +lon_0=-102 +x_0=2000000 +y_0=0 +datum=NAD27 +units=m +no_defs")
setwd(shapepath)
#read in Gulf of California shapefile
#goc.shape <- readOGR(".", "Golfo_california_polygon_WSG84")#without wetlands
goc.shape <- readOGR(".", "Golfo_california_wetland_poly_WGS84")#with wetlands
setwd(workpath)
#'create bounding polygon for the Gulf of California
#'upper.left = c(32.139900, -115.142516)
#'lower.left = c(20.164036, -115.142516)
#'lower.right = c(20.164036, -104.95342)
#'upper.right = c(32.139900, -104.95342)
lat = c(32.139900,20.164036,20.164036,32.139900)
lon = c(-115.142516, -115.142516, -104.95342, -104.95342)
#' points to polygons
goc.points = data.frame(lon,lat)
coordinates(goc.points) <- c("lon", "lat")
goc.points = goc.points %>% rbind(.,goc.points[1,])
proj4string(goc.points) <- crs.geo.wgs # define projection
goc.pol = SpatialPolygons(list(Polygons(list(Polygon(goc.points)), 1)))
proj4string(goc.pol) <- crs.geo.wgs # define projection
#' create point grid for the Gulf of California
#' this grid will be used as vertices to search for species records
#' keep in geographic
#' this returns a spatial point object
#' otherwise couldn't find difference from makegrid
#' goc.sample.points = spsample(goc.pol, n = 4000, "regular")
goc.point.grid = makegrid(goc.pol, n = 4000, pretty=FALSE)
#' create list of WKT polygons
#'
boxes = 59*70 # rows of lat (-1) vs rows of lon (-1)#29*24 for grid of 1000 points
wkt.data = matrix(1:boxes, ncol=1)
boxes.data = matrix(1:boxes, ncol=1)
#' create new counter
counter=0
print("Generating point grids")
for (i in 1:boxes)
{
corner1 = goc.point.grid[(1*counter)+1,] %>% paste(collapse=" ")
corner2 = goc.point.grid[(1*counter)+2,] %>% paste(collapse=" ")
corner3 = goc.point.grid[(1*counter)+62,] %>% paste(collapse=" ")
corner4 = goc.point.grid[(1*counter)+61,] %>% paste(collapse=" ")
coords = paste(corner1, corner2,corner3, corner4, corner1,sep=" ,")
wkt.data[i]=paste("POLYGON((",coords,"))", sep="")
counter=counter+1
print(counter)
#' bounding boxes for ecoengine
#' order is min Longitude , min Latitude , max Longitude , max Latitude.
boxes.data[i] = paste(goc.point.grid[(1*counter)+1,1],goc.point.grid[(1*counter)+1,2],goc.point.grid[(1*counter)+62,1],goc.point.grid[(1*counter)+62,2],sep=",")
}
poly.data = as.vector(wkt.data)
bbox.data = as.vector(boxes.data)
###############
#' Record retrieval
#' First retrieve from data bases that don't take bounding boxes
#' this is FishBase and iDigBio
#' retrieve all records for an ecosystem
#' Gulf of California = 165
#'
biodiversity.sp = matrix(0,nrow=0,ncol=4) %>% as.data.frame %>%
setNames(c("species","lat","lon","source"))
for(eachpoint in 3984:nrow(goc.point.grid)) {
this.point = goc.point.grid[eachpoint,]#point
print(paste("Analyzing grid point ",eachpoint,sep = " "))
point.lat = this.point[,2]
point.lon = this.point[,1]
vertnet.data <- spatialsearch(lat = point.lat, lon = point.lon, radius = 15000, limit = 1000, verbose= TRUE) %>%
.$data %>% data.frame #radius in meters
#' only modify dataframe if records are available
test.res = is.null(vertnet.data)
if(test.res==FALSE)
{
if (any(grepl("specificepithet",colnames(vertnet.data)))==TRUE){
#create scientificname column when species and genus are separate
vertnet.data = vertnet.data %>% tbl_df %>%
mutate(scientificname = paste(genus,specificepithet, sep= " "))  %>%
select(scientificname, decimallongitude, decimallatitude) %>%
mutate(source = "vertnet") %>%
setNames(c('species', 'lat', 'lon',"source")) %>% # rename columns
mutate_each(funs(as.character),lat:lon)%>%
mutate_each(funs(as.numeric),lat:lon)
}else if (any(grepl("scientificname",colnames(vertnet.data)))==TRUE){
# eliminate records with no scientific name
vertnet.data = as.data.frame(vertnet.data$data)
vert.names = unique(vertnet.data$scientificname)
}
if (!length(vert.names)==0){
vertnet.data = vertnet.data %>% tbl_df %>% select(scientificname, decimallongitude, decimallatitude) %>%
mutate(source = "vertnet") %>%
setNames(c('species', 'lat', 'lon',"source")) %>% # rename columns
mutate_each(funs(as.character),lat:lon)%>%
mutate_each(funs(as.numeric),lat:lon)
}} else {
vertnet.data = matrix(0,nrow=0,ncol=4) %>% data.frame %>% tbl_df %>%
setNames(c("species","lat","lon","source"))
}
biodiversity.sp = rbind(biodiversity.sp, vertnet.data)
}
for(eachpoint in 3984:nrow(goc.point.grid)) {
this.point = goc.point.grid[eachpoint,]#point
print(paste("Analyzing grid point ",eachpoint,sep = " "))
point.lat = this.point[,2]
point.lon = this.point[,1]
vertnet.data <- spatialsearch(lat = point.lat, lon = point.lon, radius = 15000, limit = 1000, verbose= TRUE) %>%
.$data %>% data.frame #radius in meters
#' only modify dataframe if records are available
test.res = is.null(vertnet.data)
if(test.res==FALSE)
{
if (any(grepl("specificepithet",colnames(vertnet.data)))==TRUE){
#create scientificname column when species and genus are separate
vertnet.data = vertnet.data %>% tbl_df %>%
mutate(scientificname = paste(genus,specificepithet, sep= " "))  %>%
select(scientificname, decimallongitude, decimallatitude) %>%
mutate(source = "vertnet") %>%
setNames(c('species', 'lat', 'lon',"source")) %>% # rename columns
mutate_each(funs(as.character),lat:lon)%>%
mutate_each(funs(as.numeric),lat:lon)
vert.names = unique(vertnet.data$scientificname)
}else if (any(grepl("scientificname",colnames(vertnet.data)))==TRUE){
# eliminate records with no scientific name
vertnet.data = as.data.frame(vertnet.data$data)
vert.names = unique(vertnet.data$scientificname)
}
if (!length(vert.names)==0){
vertnet.data = vertnet.data %>% tbl_df %>% select(scientificname, decimallongitude, decimallatitude) %>%
mutate(source = "vertnet") %>%
setNames(c('species', 'lat', 'lon',"source")) %>% # rename columns
mutate_each(funs(as.character),lat:lon)%>%
mutate_each(funs(as.numeric),lat:lon)
}} else {
vertnet.data = matrix(0,nrow=0,ncol=4) %>% data.frame %>% tbl_df %>%
setNames(c("species","lat","lon","source"))
}
biodiversity.sp = rbind(biodiversity.sp, vertnet.data)
}
nrow(goc.point.grid)
for(eachpoint in 4194:nrow(goc.point.grid)) {
this.point = goc.point.grid[eachpoint,]#point
print(paste("Analyzing grid point ",eachpoint,sep = " "))
point.lat = this.point[,2]
point.lon = this.point[,1]
vertnet.data <- spatialsearch(lat = point.lat, lon = point.lon, radius = 15000, limit = 1000, verbose= TRUE) %>%
.$data %>% data.frame #radius in meters
#' only modify dataframe if records are available
test.res = is.null(vertnet.data)
if(test.res==FALSE)
{
if (any(grepl("specificepithet",colnames(vertnet.data)))==TRUE){
#create scientificname column when species and genus are separate
vertnet.data = vertnet.data %>% tbl_df %>%
mutate(scientificname = paste(genus,specificepithet, sep= " "))  %>%
select(scientificname, decimallongitude, decimallatitude) %>%
mutate(source = "vertnet") %>%
setNames(c('species', 'lat', 'lon',"source")) %>% # rename columns
mutate_each(funs(as.character),lat:lon)%>%
mutate_each(funs(as.numeric),lat:lon)
vert.names = unique(vertnet.data$scientificname)
}else if (any(grepl("scientificname",colnames(vertnet.data)))==TRUE){
# eliminate records with no scientific name
vertnet.data = as.data.frame(vertnet.data$data)
vert.names = unique(vertnet.data$scientificname)
}
if (!length(vert.names)==0){
vertnet.data = vertnet.data %>% tbl_df %>% select(scientificname, decimallongitude, decimallatitude) %>%
mutate(source = "vertnet") %>%
setNames(c('species', 'lat', 'lon',"source")) %>% # rename columns
mutate_each(funs(as.character),lat:lon)%>%
mutate_each(funs(as.numeric),lat:lon)
}} else {
vertnet.data = matrix(0,nrow=0,ncol=4) %>% data.frame %>% tbl_df %>%
setNames(c("species","lat","lon","source"))
}
biodiversity.sp = rbind(biodiversity.sp, vertnet.data)
}
write(biodiversity.sp,file="record_queries4.csv")
write.csv(biodiversity.sp,file="record_queries4.csv")
getwd()
print("Now querying ebird")
biodiversity.sp = matrix(0,nrow=0,ncol=4) %>% as.data.frame %>%
setNames(c("species","lat","lon","source"))
regions.ebird = c('MX-SON','MX-BCN','MX-SIN','MX-BCS','MX-NAY','MX-JAL')
for(eachregion in 1:length(regions.ebird))
{
this.region = regions.ebird[eachregion]#region
ebird.data <- ebirdregion(this.region, max=10000)
if(nrow(ebird.data)!=0)  {
ebird.data = ebird.data %>%
select(sciName,lat,lng) %>%
setNames(c('species', 'lat', 'lon')) %>%
mutate(source = "ebird") %>%
mutate_each(funs(as.character),lat:lon)%>%
mutate_each(funs(as.numeric),lat:lon)#make sure lon and lat are numeric
} else {
ebird.data = matrix(0,nrow=0,ncol=4) %>% data.frame %>% tbl_df %>%
setNames(c("species","lat","lon","source"))
}
biodiversity.sp = rbind(biodiversity.sp, ebird.data)
}
dim(biodiversity.sp)
biodiversity.sp = biodiversity.sp %>%
mutate_each(funs(as.character),lat:lon) %>%
mutate_each(funs(as.numeric),lat:lon)
biodiversity.sp = biodiversity.sp[!duplicated(biodiversity.sp[,c('species', 'lat', 'lon')]),]
#' print records
print(paste("Records retreived:", nrow(biodiversity.sp),sep= " "))
write.csv(biodiversity.sp,"record_queries5.csv")
